<?xml version="1.0"?>

<project name="AvaTax4J Adapter" default="usage" basedir=".">
    <!-- =================================================================== -->
    <description>
   Build file for Avalara AvaTax web service adapter

   This file is intended for ANT, a Java based build tool.
   ANT is available from http://jakarta.apache.org/ant/index.html

Prerequisites:
   J2SDK 1.4          from http://java.sun.com/
   jakarta-ant        from http://jakarta.apache.org/ant/
   commons-logging    from http://jakarta.apache.org/commons/logging.html
   log4j              from http://jakarta.apache.org/log4j
   xml-security       from http://xml.apache.org/security/
                      ***** Attention: avatax4j uses a pre-release of xml-security
		      that supports XML-Cipher. This jar file is contained
		      in wss4j/lib.
                      this requires also xalan from http://xml.apache.org/xalan
		      and a JCE provider, e.g. from bouncycastle.org (recommended)
   xml-api	      various Java XML-APIs (W3C DOM, javax.xml.soap).  To compile
		      avatax4j the API classes are sufficient, to run it an
		      implementation is necessary

Optional components:
   junit              from http://www.junit.org/

Build Instructions:
   To build, run

     ant "target"

   on the directory where this file is located with the target you want.

    </description>

    <target name="init">
        <!-- Give user a chance to override without editing this file
             (and without typing -D each time it compiles it) -->
        <property file="./build.properties"/>
        <property file="${user.home}/build.properties"/>

        <property name='product.Name' value='AvaTax Client'/>
        <property name='product.name' value='avatax-client'/>
        <property name='product.shortname' value='avatax4j'/>

        <property name='product.version.major' value='4'/>
        <property name='product.version.minor' value='0'/>
        <property name='product.version.release' value='1'/>
        <property name='product.version.level' value='0'/>
        <property name='product.Version' value='${product.version.major}.${product.version.minor}.${product.version.release}.${product.version.level}'/>
        <property name='product.version' value='${product.version.major}.${product.version.minor}.${product.version.release}.${product.version.level}'/>
        <property name='product_version' value='${product.version.major}_${product.version.minor}_${product.version.release}_${product.version.level}'/>
        <property name="year" value="2005"/>
        <property name="copyright" value="Copyright &#169; ${year} Advantage Solutions, Inc. All Rights Reserved."/>

        <property name="dir.doc" value="./doc"/>
        <property name="dir.dist" value="./dist"/>
        <property name="dir.libs" value="./lib"/>
        <property name="dir.endorsed.libs" value="./endorsed"/>
        <property name="dir.src" value="./src"/>
        <property name="dir.samples" value="./samples"/>
        <property name="dir.test" value="./test"/>
        <!--
        <property name="dir.keys" value="./keys"/>
        <property name="dir.specs" value="./specs"/>
        <property name="dir.interop" value="./interop"/>
        <property name="dir.webapp" location="./webapps/axis" />
        -->
        <property name="build.dir" value="./build"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <!--property name="build.work" value="${build.dir}/work"/-->
        <!--property name="build.webapp" location="${build.dir}/webapps/axis"/-->

        <property name="jar.library" value="${product.shortname}.jar"/>

        <property name="build.doc" value="${dir.doc}"/>
        <property name="build.javadoc" value="${build.doc}/api"/>

        <path id="classpath.libraries" description="3rd party libs">
            <fileset dir="${dir.libs}">
                <include name="**/*.jar"/>
                <!-- <pathelement path="${java.class.path}"/> -->
            </fileset>
            <fileset dir="${dir.endorsed.libs}">
                <include name="**/*.jar"/>
                <!-- <pathelement path="${java.class.path}"/> -->
            </fileset>
        </path>

        <path id="classpath.avatax4j" description="avatax4j classes; first try pure class files, then jars">
            <pathelement path="${build.classes}"/>
            <pathelement path="${build.dir}/${jar.library}"/>
        </path>

        <path id="classpath.library">
            <path refid="classpath.avatax4j"/>
            <path refid="classpath.libraries"/>
        </path>

        <path id="classpath.test">
            <!-- classpath for test is librarypath plus junit -->
            <path refid="classpath.library"/>
            <pathelement path="${java.class.path}"/>
        </path>

        <path id="classpath.test.jar">
            <!-- classpath for test is librarypath plus junit -->
            <path refid="classpath.library"/>
            <pathelement path="${build.dir}/${jar.library}"/>
            <pathelement path="${build.dir}/${jar.tests}"/>
        </path>

        <patternset id="distFiles">
            <include name="build.xml"/>
            <!--include name="LICENSE.txt"/-->
        </patternset>

        <patternset id="srcFiles">
            <include name="src/**/*"/>
        </patternset>

        <patternset id="srcSamplesFiles">
            <include name="samples/**/*"/>
        </patternset>

        <patternset id="srcUnitTestsFiles">
            <include name="test/**/*"/>
        </patternset>

        <property name="javadoc.packages"
            value="
org.apache.ws.security,
org.apache.ws.security.components,
org.apache.ws.security.components.crypto,
org.apache.ws.security.message,
org.apache.ws.security.message.token,
org.apache.ws.security.util,
org.apache.ws.axis,
org.apache.ws.axis.security,
org.apache.ws.axis.security.util,
com.avalara.avatax.services.base,
com.avalara.avatax.services.address,
com.avalara.avatax.services.avacert,
com.avalara.avatax.services.tax
"/>

        <echo message="-------------------------------------------------------------------"/>
        <echo message="-------------- ${product.Name} v${product.Version} [${year}] ----------------"/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="Building with ${ant.version}"/>
        <echo message="using build file ${ant.file}"/>
        <echo message="Java ${java.version} located at ${java.home} "/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="--- Property values ---" />
        <echo message="sun.boot.class.path=${sun.boot.class.path}"/>
        <pathconvert targetos="windows" property="classpath.test.as.string" refid="classpath.test"/>
        <echo message="classpath.test: ${classpath.test.as.string}"/>
        <echo message="" />

    </target>

    <target name="usage" depends="init">
        <echo message="                                                                   "/>
        <echo message="                                                                   "/>
        <echo message=" Build instructions                                                "/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="                                                                   "/>
        <echo message=" available targets are:                                            "/>
        <echo message="                                                                   "/>
        <echo message="   compile         --> compiles everything                         "/>
        <echo message="   compile.library --> compiles the source code                    "/>
        <echo message="   compile.samples --> compiles the samples source code            "/>
        <echo message="   compile.tests   --> compiles the tests source code              "/>
        <echo message="                                                                   "/>
        <echo message="   javadoc         --> generates the API documentation             "/>
        <echo message="                       (needs Java > 1.2)                          "/>
        <echo message="                                                                   "/>
        <echo message="   test            --> runs the defined JUnit tests                "/>
        <echo message="   report          --> generates html report of test results       "/>
        <echo message="                                                                   "/>
        <echo message="   clean           --> cleans up all generated files and           "/>
        <echo message="                       directories                                 "/>
        <echo message="   jar             --> creates the JAR file                        "/>
        <echo message="   gump            --> includes javadoc, compile jar and test      "/>
        <echo message="                                                                   "/>
        <echo message="   usage           --> provides help on using the build tool       "/>
        <echo message="                       (default)                                   "/>
        <echo message="                                                                   "/>
        <echo message="   samples         --> runs the samples                            "/>
        <echo message="                                                                   "/>
        <echo message=" See comments inside the build.xml file for more details.          "/>
        <echo message="-------------------------------------------------------------------"/>
        <echo message="                                                                   "/>
    </target>

    <target name="clean" depends="init"
        description="Clean up all temporary build files">
        <delete dir="${build.dir}"/>
    </target>

    <target name="prepare" depends="init"
        description="This target generates a first build directory and checks for some libraries">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <delete dir="${build.dir}/test-reports"/>
        <mkdir dir="${build.dir}/test-reports"/>

        <available property="junit.present" classname="junit.framework.TestCase">
            <!-- check whether JUnit is available -->
            <classpath refid="classpath.test"/>
        </available>

        <available property="jdk14.present" classname="java.security.cert.CertPath">
            <!-- check whether JDK14 is available -->
            <classpath refid="classpath.test"/>
        </available>

        <available property="jdk15.present" classname="java.lang.instrument.Instrumentation">
            <!-- check whether JDK15 is available -->
            <classpath refid="classpath.test"/>
        </available>

        <available property="bc.present" classname="org.bouncycastle.jce.provider.BouncyCastleProvider">
            <!-- check whether BouncyCastle is available -->
            <classpath refid="classpath.test"/>
        </available>

        <echo message="--- Flags (Note: If the {property name} is displayed, "/>
        <echo message="           then the component is not present)"/>
        <echo message="junit.present=${junit.present}"/>
        <echo message="jdk14.present=${jdk14.present}"/>
        <echo message="jdk15.present=${jdk15.present}"/>
        <echo message="bc.present=${bc.present}"/>

    </target>

    <!-- #################################################################### -->
    <!-- #################################################################### -->
    <!-- #################################################################### -->
    <!-- #################################################################### -->
    <!-- #################################################################### -->

    <target name="prepare-src" depends="prepare"
    	description="">
        <!-- create directories -->
        <mkdir dir="${build.classes}"/>
    </target>

    <target name="javadoc"
        depends="init,prepare-src"
        description="Generates javadocs from all .java files">
        <!--delete dir="${build.javadoc}"/-->
        <mkdir dir="${build.javadoc}"/>

        <javadoc destdir="${build.javadoc}"
            packagenames="${javadoc.packages}"
            classpathref="classpath.test"
            public="true" author="false"
            sourcepath="${dir.src}"
            overview="${build.doc}/overview.html">
            <!--sourcepath>
                <pathelement location="${dir.src}"/>
                <pathelement location="${dir.test}"/>
            </sourcepath-->
        </javadoc>
    </target>

    <!-- #################################################################### -->

    <!-- Aliases -->
    <target name="javadocs" depends="javadoc"/>
    <target name="jars" depends="jar"/>

    <!-- Collections -->
    <target name="gump"
            depends="clean,compile,test"
            description="Target for the gump run"/>

    <target name="compile"
            depends="compile.library, compile.samples, compile.tests"
            description="compile everything"/>

    <target name="test"
            depends="unitTests"
            description="tests everything"/>

    <!-- #################################################################### -->

    <target name="compile.library" depends="prepare-src">
        <!-- Compile the java code from ${dir.src} into ${build.classes} -->
        <javac srcdir="${dir.src}" destdir="${build.classes}" debug="on">
            <classpath refid="classpath.library"/>
            <!--exclude name="**/Merlin.java" unless="jdk14.present"/-->
        </javac>
        <!-- Copy Property files -->
        <copy todir="${build.classes}">
            <fileset dir="${dir.src}">
                <include name="**/*.properties"/>
                <!--exclude name="**/axis/**/*.properties"/-->
            </fileset>
        </copy>
    </target>

    <target name="compile.tests"
        if="junit.present">

        <javac srcdir="${dir.test}" destdir="${build.classes}" debug="on">
            <classpath refid="classpath.test"/>
            <!--exclude name="**/secconv/*.java"/-->
        </javac>

        <!-- Copy Property files -->
        <copy todir="${build.classes}">
            <fileset dir="${dir.test}" includes="**/*.properties"/>
        </copy>
    </target>

    <target name="compile.samples"
        depends="compile.library">
        <!-- Compile the java code from ${dir.src} into ${build.classes} -->
        <javac srcdir="${dir.samples}"
            debug="on"
            source="1.4"
            destdir="${build.classes}">
            <classpath refid="classpath.library"/>
        </javac>
        <!-- Copy Property files -->
        <copy todir="${build.classes}">
            <fileset dir="${dir.test}" includes="**/*.properties"/>
        </copy>
    </target>

    <target name="unitTests" depends="compile">
        <junit printsummary="yes"
            haltonfailure="yes"
            fork="yes"
            dir="${basedir}">
            <!-- See if this helps with Gump test failures -->
            <sysproperty key="build.clonevm" value="true"/>

            <jvmarg value="-Djava.endorsed.dirs=${basedir}/endorsed"/>
            <classpath refid="classpath.test.jar"/>
            <formatter type="xml"/>
            <batchtest todir="${build.dir}/test-reports">
                <fileset dir="${build.classes}">
                    <include name="test/**/*.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="samples" depends="init"><!-- depends="compile"> -->
        <echo message=""/>
        <echo message="TestConnectionSample"/>
        <echo message="--------------------"/>
          <java classname="TestConnectionSample"
              fork="true" failonerror="true">
             <arg value="-h"/>
             <classpath refid="classpath.test"/>
         </java>
        <echo message=""/>
        <echo message="AddressValidateSample"/>
        <echo message="---------------------"/>
        <java classname="AddressValidateSample"
            fork="true" failonerror="true">
           <arg value="-h"/>
           <classpath refid="classpath.test"/>
       </java>
        <echo message=""/>
        <echo message="TaxTransactionSample"/>
        <echo message="--------------------"/>
        <java classname="TaxTransactionSample"
            fork="true" failonerror="true">
           <arg value="-h"/>
           <classpath refid="classpath.test"/>
       </java>
    </target>

    <!-- generate a report from all the tests.
           requires Xalan or other XSLT engine in ant\lib-->
    <target name="report" depends="init">
        <junitreport todir="${build.dir}/test-reports">
            <fileset dir="${build.dir}/test-reports">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/test-reports/html"/>
        </junitreport>
        <echo message="point your browser to ${build.dir}/test-reports/html/index.html"/>
    </target>

    <target name="jar"
        depends="compile"
        description="Creates the ${jar.library}">

        <jar jarfile="${build.dir}/${jar.library}">
            <fileset dir="./" includes="*.wsdd"/>
            <fileset dir="${build.classes}" includes="com/**/*, org/**/*, *.txt"/>
        </jar>
    </target>

   <target name="bindist" depends="clean,compile" description="Build zip file for distro">
   		<delete dir="${dir.dist}/**/*"/>
        <mkdir dir="${dir.dist}"/>
       <jar jarfile="${dir.dist}/${jar.library}">
           <fileset dir="./" includes="*.wsdd"/>
           <fileset dir="${build.classes}" includes="com/**/*, org/**/*, *.txt"/>
       </jar>
        <zip destfile="${dir.dist}/${product.shortname}-bin-${product.version}.zip">
            <zipfileset prefix="avatax4j" dir="."
                includes="test/**, samples/**"/>
            <zipfileset prefix="avatax4j/doc/api" dir="${build.javadoc}"/>
            <zipfileset fullpath="avatax4j/${jar.library}" dir="${dir.dist}" includes="${jar.library}"/>
        </zip>
	  <delete file="${dir.dist}/${jar.library}" />
    </target>

    <target name="srcdist" depends="init" description="Build source zip file for distro">
        <mkdir dir="${dir.dist}"/>
        <zip destfile="${dir.dist}/${product.shortname}-src-${product.version}-src.zip">
            <zipfileset prefix="avatax4j" dir="."
                includes="src/** build.xml "/>
        </zip>
    </target>

    <target name="fulldist" depends="clean,compile,javadoc" description="Build zip file for distro">
         <delete dir="${dir.dist}/**/*"/>
         <mkdir dir="${dir.dist}"/>
        <jar jarfile="${dir.dist}/${jar.library}">
            <fileset dir="./" includes="*.wsdd"/>
            <fileset dir="${build.classes}" includes="com/**/*, org/**/*, *.txt"/>
        </jar>
         <zip destfile="${dir.dist}/${product.shortname}-${product.version}.zip">
             <zipfileset prefix="avatax4j" dir="."
                 includes="endorsed/**, lib/**, src/**, samples/**, test/**, avatax4j.properties.sample, avatax4j.wsdd, build.xml, readme.html"/>
             <!--zipfileset prefix="avatax4j/doc/api" dir="${build.javadoc}"/-->
             <zipfileset prefix="avatax4j/doc/api" dir="${build.javadoc}"/>
             <zipfileset fullpath="avatax4j/${jar.library}" dir="${dir.dist}" includes="${jar.library}"/>
         </zip>
       <delete file="${dir.dist}/${jar.library}" />
     </target>

    <target name="fixcrlf"
        description="Fixes CRLF">
        <fixcrlf srcdir="."
            eol="crlf"
            includes="**/*.java"
            />
        <fixcrlf srcdir="."
            eol="crlf"
            includes="**/*.properties"
            />
    </target>

</project>
